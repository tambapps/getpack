package com.tambapps.http.hyperpoet.invoke

import com.tambapps.http.hyperpoet.*

import marcel.lang.dynamic.MissingMethodException
import java.util.stream.Collectors

class OperationPoeticInvoker extends PoeticInvoker {

  override fun dynobj invoke(HttpPoet poet, String methodName, Map namedArgs, Object... args) {
    List fields = methodName.split("(?=\\p{Upper})", -1).map { String it -> it.toLowerCase() }
    if (fields.size() < 2) {
      throw new MissingMethodException(getClass(), methodName, args)
    }
    HttpMethod method = switch (fields[0]) {
      'get' -> HttpMethod.GET
      'put' -> HttpMethod.PUT
      'delete' -> HttpMethod.DELETE
      'modify', 'patch' -> HttpMethod.PATCH
      'create', 'post' -> HttpMethod.POST
      else -> throw new MissingMethodException(getClass(), methodName, args)
    }
    String endpoint = "/" + fields.stream().skip(1l).collect(Collectors.joining("-"));
    if (!fields.getLast<String>().endsWith("s")) {
      // endpoints for creating and use the plural
      endpoint += "s"
    }

    // to handle calls like getTodo(1)
    List callArgs = args.toList()
    if (callArgs?[0] != null && callArgs?[0] !instanceof Map) {
      endpoint += "/" + callArgs.remove(0)
    }
    return when {
      !namedArgs.isEmpty() && !callArgs.isEmpty() -> throw new MissingMethodException(getClass(), methodName, args)
      namedArgs.isEmpty() -> {
        def (Object body, Map params, Map headers) = switch (callArgs.size()) {
          1 -> method.hasBody() ? [callArgs[0], null, null] : [null, callArgs[0], null]
          2 -> method.hasBody() ? [callArgs[0], callArgs[1], null] : [null, callArgs[0], args[1]]
          3 -> args
          else -> [null, null, null]
        }
        poet.request(method: method.name(), path: endpoint, body: body, params: params, headers: headers)
      }
      else -> poet.request(method: method.name(),
                           path: endpoint,
                           body: namedArgs['body'] as Map,
                           params: namedArgs['params'] as Map,
                           headers: namedArgs['headers'] as Map)
    }
  }
}