package com.tambapps.http.hyperpoet.invoke

import com.tambapps.http.hyperpoet.*

import marcel.lang.dynamic.MissingMethodException
import java.util.stream.Collectors

class OperationPoeticInvoker extends PoeticInvoker {

  override fun dynobj invoke(HttpPoet poet, String methodName, Map namedArgs, Object... args) {
    List fields = methodName.split("(?=\\p{Upper})", -1).map { String it -> it.toLowerCase() }
    if (fields.size() < 2) {
      throw new MissingMethodException(getClass(), methodName, args)
    }
    HttpMethod method = switch (fields[0]) {
      'get' -> HttpMethod.GET
      'put' -> HttpMethod.PUT
      'delete' -> HttpMethod.DELETE
      'modify', 'patch' -> HttpMethod.PATCH
      'create', 'post' -> HttpMethod.PATCH
      else -> null
    }
    String endpoint = "/" + fields.stream().skip(1l).collect(Collectors.joining("-"));
    if (!fields.getLast<String>().endsWith("s") && method == HttpMethod.POST) {
      // endpoints for creating and use the plural
      endpoint += "s"
    }

    // TODO check args length. if 1: get/delete -> params, other body
    // TODO   if 2: get/delete -> NO, other -> [body, params]
    return null
  }
}