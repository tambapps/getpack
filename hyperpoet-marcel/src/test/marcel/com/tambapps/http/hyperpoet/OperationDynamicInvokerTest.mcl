package com.tambapps.http.hyperpoet

import com.tambapps.http.hyperpoet.invoke.OperationDynamicInvoker

import org.junit.jupiter.api.Test

import static org.junit.jupiter.api.Assertions.assertEquals
import static org.junit.jupiter.api.Assertions.assertFalse
import static org.junit.jupiter.api.Assertions.assertNotNull
import static org.junit.jupiter.api.Assertions.assertThrows
import static org.junit.jupiter.api.Assertions.assertTrue

public class OperationDynamicInvokerTest extends TodoApiRunner {

  internal DynamicHttpPoet client = newPoet()

  @Test
  fun void testList() {
    dynobj todos = client.getTodos()
    assertTrue(todos.asList().size() > 0)
  }

  @Test
  fun void testGet() {
    dynobj todo = client.getTodo(1)

    assertEquals(1, todo.id.value)
    assertEquals(1, todo.userId.value)
    assertEquals('Go to the grocery store', todo.title.value)
    assertFalse(todo.completed.asBool())
    assertTrue(todo.successful().asBool())
    assertEquals(200, todo.code().value)
    assertNotNull(todo.headers())
  }

  @Test
  fun void testPatch() {
    dynobj todo = client.patchTodo(1, body: [title: 'new title'])

    assertEquals(1, todo.id.value)
    assertEquals(1, todo.userId.value)
    assertEquals('new title', todo.title.value)
    assertFalse(todo.completed.asBool())
  }

  @Test
  fun void testPatch2() {
    dynobj todo = client.patchTodo 1, [title: 'newer title']

    assertEquals(1, todo.id.value)
    assertEquals(1, todo.userId.value)
    assertEquals('newer title', todo.title.value)
    assertFalse(todo.completed.asBool())
  }

  @Test
  fun void testPost() {
    dynobj todo = client.postTodo([title: 'foo', completed: true, userId: 5])

    assertEquals('foo', todo.title.value)
    assertTrue(todo.completed.asBool())
    assertEquals(5, todo.userId.value)
    assertNotNull(todo.id)
  }

  private fun DynamicHttpPoet newPoet() {
    DynamicHttpPoet p = new DynamicHttpPoet(baseUrl: "http://${TodoApiRunner.HOST}:${TodoApiRunner.PORT}", contentType: ContentType.JSON, acceptContentType: ContentType.JSON)
    p.dynamicInvoker = new OperationDynamicInvoker()
    return p
  }
}